from http import client
from unicodedata import name
from aiogram import Dispatcher, types
from create_bot import bot
from keyboards import client_autorization, client_menu, language
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

KEY = None

class Labs(StatesGroup):
    NAME = State()
    LANGUAGE = State()
    NOMER = State()
    OPLATA = State()

async def start(message: types.Message):
        await bot.send_message(message.from_user.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–µ–≥–æ –±–æ—Ç–∞. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ß—Ç–æ –±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è‚úÖ.', reply_markup = client_autorization)


async def autorizate(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='@SwitchAndWas', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await bot.send_message(message.from_user.id,'–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í—ã –±—ã–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=client_menu)
    else:
        await bot.send_message(message.from_user.id, '–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')

async def price(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='@SwitchAndWas', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await message.answer('–¶–µ–Ω–∞ –∑–∞ –ª–∞–±–∞—Ä—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç: 7 BYN')
    else: 
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.')


async def lb_start(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id='@SwitchAndWas', user_id=message.from_user.id)
    if user_channel_status["status"] != 'left':
        await Labs.NAME.set()
        await bot.send_message(message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.')
    

async def load_NAME(message: types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['NAME'] = message.text
    await Labs.next()
    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω.", reply_markup= language)


async def load_LANGUAGE(message:types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['LANGUAGE'] = message.text
    await Labs.next()
    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ª–∞–±–∞—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞.", reply_markup=ReplyKeyboardRemove())

async def load_NOMER(message:types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['NOMER'] = message.text
    await Labs.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∏ —Ä–∞–±–æ—Ç—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å 7 BYN –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É. –°—é–¥–∞ –∂–µ –≤–∞–º –Ω–∞–¥–æ –≤–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è.")

async def load_OPLATA(message:types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['OPLATA'] = float(message.text)
        
    nam = data.get('NAME')
    lang = data.get('LANGUAGE')
    nom = data.get('NOMER')
    op = data.get('OPLATA')
    await bot.send_message(message.from_user.id, '–†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.', reply_markup = client_menu)
    await bot.send_message(601819112,f'–£ –≤–∞—Å –∑–∞–∫–∞–∑–∞–Ω–∞ –ª–∞–±–∞—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {nam}\n–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {lang}\n–ù–æ–º–µ—Ä –ª–∞–±–∞—Ä—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã: {nom}\n–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {op}\n\nCurrent ID {message.from_user.id}')
    await state.finish()



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start', 'help'])
    dp.register_message_handler(autorizate, text = '–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ')
    dp.register_message_handler(price, text = '–¶–µ–Ω–∞ –∑–∞ –ª–∞–±–∞—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—Éüí≤')
    dp.register_message_handler(lb_start, text = '–ó–∞–∫–∞–∑–∞—Ç—å –ª–∞–±–∞—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É‚ùì', state = None)
    dp.register_message_handler(load_NAME, state = Labs.NAME)
    dp.register_message_handler(load_LANGUAGE, state = Labs.LANGUAGE)
    dp.register_message_handler(load_NOMER, state =Labs.NOMER)
    dp.register_message_handler(load_OPLATA, state =Labs.OPLATA)

    